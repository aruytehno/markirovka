# https://github.com/li0ard/nechestniy_znak/tree/main
import requests
from urllib.parse import quote_plus
import json

'''
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫–æ–¥–æ–≤ - –Ω–∞—Ö–æ–¥—è—Ç—Å—è –ª–∏ –æ–Ω–∏ –≤ –æ–±–æ—Ä–æ—Ç–µ –∏–ª–∏ –Ω–µ—Ç.

–û–ø–∏—Å–∞–Ω–∏–µ API –ì–ò–° –ú–¢
https://znak-it.ru/wp-content/uploads/2022/04/api-gis-mt.pdf

–°—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞/–ö–ò:
EMITTED ‚Äì –≠–º–∏—Ç–∏—Ä–æ–≤–∞–Ω. –í—ã–ø—É—â–µ–Ω;
APPLIED ‚Äì –≠–º–∏—Ç–∏—Ä–æ–≤–∞–Ω. –ü–æ–ª—É—á–µ–Ω;
INTRODUCED ‚Äì –í –æ–±–æ—Ä–æ—Ç–µ;
WRITTEN_OFF ‚Äì –ö–ò —Å–ø–∏—Å–∞–Ω;
RETIRED ‚Äì –í—ã–±—ã–ª;
DISAGGREGATION ‚Äì –†–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω (—Ç–æ–ª—å–∫–æ –¥–ª—è —É–ø–∞–∫–æ–≤–æ–∫)
'''
class Lib:
    def __init__(self):
        pass

    def _get(self, content, type):
        return requests.get(f"https://mobile.api.crpt.ru/mobile/check?code={content}&codeType={type}").json()

    def infoFromDataMatrix(self, datamatrix):
        return self._get(datamatrix, "datamatrix")

    def infoFromEAN13(self, ean13):
        return self._get(ean13, "ean13")

    def infoFromQr(self, qr):
        return self._get(qr, "qr")

def getInfoFromDataMatrix(content, type):
    content = quote_plus(content)  # –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ AP
    link = f"https://mobile.api.crpt.ru/mobile/check?code={content}&codeType={type}"
    requests_json = requests.get(link).json()
    input = json.dumps(requests_json)
    jsonobject = json.loads(input)
    info_msg = []

    try:
        info_msg.append(jsonobject['code'])
        if str(jsonobject['codeFounded']) == 'True':
            if str(jsonobject['tiresData']['status']) == 'INTRODUCED':
                info_msg.append('–í –æ–±–æ—Ä–æ—Ç–µ ‚úÖ')
            elif str(jsonobject['tiresData']['status']) == 'RETIRED':
                info_msg.append('–í—ã–±—ã–ª –∏–∑ –æ–±–æ—Ä–æ—Ç–∞ ‚ùå')
            elif str(jsonobject['tiresData']['status']) == 'EMITTED':
                info_msg.append('–≠–º–∏—Ç–∏—Ä–æ–≤–∞–Ω, –≤—ã–ø—É—â–µ–Ω ‚úîÔ∏è')
            elif str(jsonobject['tiresData']['status']) == 'APPLIED':
                info_msg.append('–≠–º–∏—Ç–∏—Ä–æ–≤–∞–Ω, –ø–æ–ª—É—á–µ–Ω üîó')
            elif str(jsonobject['tiresData']['status']) == 'WRITTEN_OFF':
                info_msg.append('–ö–ò —Å–ø–∏—Å–∞–Ω üü•')
            elif str(jsonobject['tiresData']['status']) == 'DISAGGREGATION':
                info_msg.append('–†–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω (—Ç–æ–ª—å–∫–æ –¥–ª—è —É–ø–∞–∫–æ–≤–æ–∫) üì¶üü•')
            else:
                info_msg.append('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∫–æ–¥–∞ ‚ö†Ô∏è')
                info_msg.append('[' + str(jsonobject['tiresData']['status']) + ']')
            info_msg.append('[' + str(jsonobject['productName']) + ']')
        else:
            info_msg.append('–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùó')

    except:
        info_msg.append('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö üõë')

    return info_msg


if __name__ == "__main__":
    with open('datamatrix.txt') as f:
        counter = 0
        data_codes = f.read().splitlines()
        len_data_codes = len(data_codes)

        for code in data_codes:
            counter += 1
            i_out = ''
            for info_data in getInfoFromDataMatrix(code, "datamatrix"):
                i_out += info_data + ' '
            print(str(counter) + '/' + str(len_data_codes) + ' ' + i_out)
