import requests
from urllib.parse import quote_plus


class CodeChecker:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫–æ–¥–æ–≤ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ —á–µ—Ä–µ–∑ API –ì–ò–° –ú–¢.

    –ê—Ç—Ä–∏–±—É—Ç—ã:
    - BASE_URL: –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API.

    –ú–µ—Ç–æ–¥—ã:
    - get_info: –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–¥–µ, –ø—Ä–æ–≤–µ—Ä—è—è –µ–≥–æ –ø–æ —Ç–∏–ø—É.
    - _get_info: –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.
    """

    BASE_URL = "https://mobile.api.crpt.ru/mobile/check"

    def _get_info(self, code, code_type):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–¥–µ.

        :param code: –ö–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, DataMatrix, EAN13).
        :param code_type: –¢–∏–ø –∫–æ–¥–∞ ('datamatrix', 'ean13', 'qr').
        :return: JSON –æ—Ç–≤–µ—Ç –æ—Ç API –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
        """
        encoded_code = quote_plus(code)
        url = f"{self.BASE_URL}?code={encoded_code}&codeType={code_type}"
        try:
            response = requests.get(url)
            response.raise_for_status()
            return response.json()
        except requests.RequestException as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}")
            return None

    def get_info(self, code, code_type="datamatrix"):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–¥–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∏ –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–µ.

        :param code: –ö–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.
        :param code_type: –¢–∏–ø –∫–æ–¥–∞ ('datamatrix', 'ean13', 'qr').
        :return: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ —Å—Ç–∞—Ç—É—Å–µ –∏ –ø—Ä–æ–¥—É–∫—Ç–µ.
        """
        data = self._get_info(code, code_type)
        if not data:
            return ["–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö üõë"]

        info_msg = [data.get('code', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–¥')]

        if data.get('codeFounded'):
            status = data.get('tiresData', {}).get('status', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å')
            status_messages = {
                'INTRODUCED': '–í –æ–±–æ—Ä–æ—Ç–µ ‚úÖ',
                'RETIRED': '–í—ã–±—ã–ª –∏–∑ –æ–±–æ—Ä–æ—Ç–∞ ‚ùå',
                'EMITTED': '–≠–º–∏—Ç–∏—Ä–æ–≤–∞–Ω, –≤—ã–ø—É—â–µ–Ω ‚úîÔ∏è',
                'APPLIED': '–≠–º–∏—Ç–∏—Ä–æ–≤–∞–Ω, –ø–æ–ª—É—á–µ–Ω üîó',
                'WRITTEN_OFF': '–ö–ò —Å–ø–∏—Å–∞–Ω üü•',
                'DISAGGREGATION': '–†–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω (—Ç–æ–ª—å–∫–æ –¥–ª—è —É–ø–∞–∫–æ–≤–æ–∫) üì¶üü•'
            }
            info_msg.append(status_messages.get(status, f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∫–æ–¥–∞ ‚ö†Ô∏è [{status}]'))
            product_name = data.get('productName', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç')
            info_msg.append(f'[{product_name}]')
        else:
            info_msg.append('–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùó')

        return info_msg


if __name__ == "__main__":
    checker = CodeChecker()

    # –ß—Ç–µ–Ω–∏–µ –∫–æ–¥–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
    with open('datamatrix.txt') as f:
        data_codes = f.read().splitlines()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–≥–æ –∫–æ–¥–∞ –∏ –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    for index, code in enumerate(data_codes, start=1):
        info = checker.get_info(code)
        print(f"{index}/{len(data_codes)} {' '.join(info)}")
