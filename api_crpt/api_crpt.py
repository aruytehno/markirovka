'''
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫–æ–¥–æ–≤ - –Ω–∞—Ö–æ–¥—è—Ç—Å—è –ª–∏ –æ–Ω–∏ –≤ –æ–±–æ—Ä–æ—Ç–µ –∏–ª–∏ –Ω–µ—Ç.

–û–ø–∏—Å–∞–Ω–∏–µ API –ì–ò–° –ú–¢
https://znak-it.ru/wp-content/uploads/2022/04/api-gis-mt.pdf

–°—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞/–ö–ò:
EMITTED ‚Äì –≠–º–∏—Ç–∏—Ä–æ–≤–∞–Ω. –í—ã–ø—É—â–µ–Ω;
APPLIED ‚Äì –≠–º–∏—Ç–∏—Ä–æ–≤–∞–Ω. –ü–æ–ª—É—á–µ–Ω;
INTRODUCED ‚Äì –í –æ–±–æ—Ä–æ—Ç–µ;
WRITTEN_OFF ‚Äì –ö–ò —Å–ø–∏—Å–∞–Ω;
RETIRED ‚Äì –í—ã–±—ã–ª;
DISAGGREGATION ‚Äì –†–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω (—Ç–æ–ª—å–∫–æ –¥–ª—è —É–ø–∞–∫–æ–≤–æ–∫)
'''
import requests
from urllib.parse import quote_plus

class CodeChecker:
    BASE_URL = "https://mobile.api.crpt.ru/mobile/check"

    def __init__(self):
        pass

    def _get_info(self, code, code_type):
        encoded_code = quote_plus(code)
        url = f"{self.BASE_URL}?code={encoded_code}&codeType={code_type}"
        try:
            response = requests.get(url)
            response.raise_for_status()
            return response.json()
        except requests.RequestException as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}")
            return None

    def get_info(self, code, code_type="datamatrix"):
        data = self._get_info(code, code_type)
        if not data:
            return ["–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö üõë"]

        info_msg = [data.get('code', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–¥')]

        if data.get('codeFounded'):
            status = data.get('tiresData', {}).get('status', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å')
            status_messages = {
                'INTRODUCED': '–í –æ–±–æ—Ä–æ—Ç–µ ‚úÖ',
                'RETIRED': '–í—ã–±—ã–ª –∏–∑ –æ–±–æ—Ä–æ—Ç–∞ ‚ùå',
                'EMITTED': '–≠–º–∏—Ç–∏—Ä–æ–≤–∞–Ω, –≤—ã–ø—É—â–µ–Ω ‚úîÔ∏è',
                'APPLIED': '–≠–º–∏—Ç–∏—Ä–æ–≤–∞–Ω, –ø–æ–ª—É—á–µ–Ω üîó',
                'WRITTEN_OFF': '–ö–ò —Å–ø–∏—Å–∞–Ω üü•',
                'DISAGGREGATION': '–†–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω (—Ç–æ–ª—å–∫–æ –¥–ª—è —É–ø–∞–∫–æ–≤–æ–∫) üì¶üü•'
            }
            info_msg.append(status_messages.get(status, f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∫–æ–¥–∞ ‚ö†Ô∏è [{status}]'))
            product_name = data.get('productName', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç')
            info_msg.append(f'[{product_name}]')
        else:
            info_msg.append('–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùó')

        return info_msg

if __name__ == "__main__":
    checker = CodeChecker()

    with open('datamatrix.txt') as f:
        data_codes = f.read().splitlines()

    for index, code in enumerate(data_codes, start=1):
        info = checker.get_info(code)
        print(f"{index}/{len(data_codes)} {' '.join(info)}")
