import os
import sys
import glob

from pdfminer.layout import LAParams, LTTextBox
from pdfminer.pdfpage import PDFPage
from pdfminer.pdfinterp import PDFResourceManager
from pdfminer.pdfinterp import PDFPageInterpreter
from pdfminer.converter import PDFPageAggregator
from pdfminer.pdfparser import PDFParser
from pdfminer.pdfdocument import PDFDocument
from pdfminer.pdfinterp import resolve1
from PyPDF2 import PdfWriter, PdfReader
import requests
from urllib.parse import quote_plus


class CodeChecker:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫–æ–¥–æ–≤ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ —á–µ—Ä–µ–∑ API –ì–ò–° –ú–¢.

    –ê—Ç—Ä–∏–±—É—Ç—ã:
    - BASE_URL: –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API.

    –ú–µ—Ç–æ–¥—ã:
    - get_info: –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–¥–µ, –ø—Ä–æ–≤–µ—Ä—è—è –µ–≥–æ –ø–æ —Ç–∏–ø—É.
    - _get_info: –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.
    """

    BASE_URL = "https://mobile.api.crpt.ru/mobile/check"

    def _get_info(self, code, code_type):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–¥–µ.

        :param code: –ö–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, DataMatrix, EAN13).
        :param code_type: –¢–∏–ø –∫–æ–¥–∞ ('datamatrix', 'ean13', 'qr').
        :return: JSON –æ—Ç–≤–µ—Ç –æ—Ç API –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
        """
        encoded_code = quote_plus(code)
        url = f"{self.BASE_URL}?code={encoded_code}&codeType={code_type}"
        try:
            response = requests.get(url)
            response.raise_for_status()
            return response.json()
        except requests.RequestException as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}")
            return None

    def get_info(self, code, code_type="datamatrix"):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–¥–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∏ –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–µ.

        :param code: –ö–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.
        :param code_type: –¢–∏–ø –∫–æ–¥–∞ ('datamatrix', 'ean13', 'qr').
        :return: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ —Å—Ç–∞—Ç—É—Å–µ –∏ –ø—Ä–æ–¥—É–∫—Ç–µ.
        """
        data = self._get_info(code, code_type)
        if not data:
            return ["–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö üõë"]

        info_msg = [data.get('code', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–¥')]

        if data.get('codeFounded'):
            status = data.get('tiresData', {}).get('status', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å')
            status_messages = {
                'INTRODUCED': '–í –æ–±–æ—Ä–æ—Ç–µ ‚úÖ',
                'RETIRED': '–í—ã–±—ã–ª –∏–∑ –æ–±–æ—Ä–æ—Ç–∞ ‚ùå',
                'EMITTED': '–≠–º–∏—Ç–∏—Ä–æ–≤–∞–Ω, –≤—ã–ø—É—â–µ–Ω ‚úîÔ∏è',
                'APPLIED': '–≠–º–∏—Ç–∏—Ä–æ–≤–∞–Ω, –ø–æ–ª—É—á–µ–Ω üîó',
                'WRITTEN_OFF': '–ö–ò —Å–ø–∏—Å–∞–Ω üü•',
                'DISAGGREGATION': '–†–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω (—Ç–æ–ª—å–∫–æ –¥–ª—è —É–ø–∞–∫–æ–≤–æ–∫) üì¶üü•'
            }
            info_msg.append(status_messages.get(status, f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∫–æ–¥–∞ ‚ö†Ô∏è [{status}]'))
            product_name = data.get('productName', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç')
            info_msg.append(f'[{product_name}]')
        else:
            info_msg.append('–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùó')

        return info_msg


def check_datamatrix(data_codes):
    checker = CodeChecker()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–≥–æ –∫–æ–¥–∞ –∏ –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    for index, code in enumerate(data_codes, start=1):
        info = checker.get_info(code)
        print(f"{index}/{len(data_codes)} {' '.join(info)}")


'''
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–¥–æ–≤ –≤ PDF-–¥–æ–∫—É–º–µ–Ω—Ç–µ —Å –æ–±—â–∏–º –º–∞—Å—Å–∏–≤–æ–º –∫–æ–¥–æ–≤ –ø–æ—Å–ª–µ –≤—ã–≥—Ä—É–∑–∫–∏, —Å–æ—Ö—Ä–∞–Ω—è—è –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤ –Ω–æ–≤—ã–π PDF-—Ñ–∞–π–ª.
'''


def extract_image(x, y, index_page, file_pdf_reader):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ–±—Ä–µ–∑–∞–Ω–Ω—É—é —á–∞—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã PDF –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏ –∏–Ω–¥–µ–∫—Å–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.

    :param x: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ X —Ü–µ–Ω—Ç—Ä–∞ –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è –æ–±—Ä–µ–∑–∫–∏ (float).
    :param y: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Y —Ü–µ–Ω—Ç—Ä–∞ –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è –æ–±—Ä–µ–∑–∫–∏ (float).
    :param index_page: –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (int).
    :param file_pdf_reader: –û–±—ä–µ–∫—Ç PdfReader –¥–ª—è —á—Ç–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü PDF.
    :return: –û–±—Ä–µ–∑–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ PdfReader.
    """
    crop_page = file_pdf_reader.pages[index_page - 1]
    crop_page.mediabox.left = x - 38
    crop_page.mediabox.right = x + 62
    crop_page.mediabox.top = y + 118.57
    crop_page.mediabox.bottom = y - 53.43
    return crop_page


def find_txt_pdf(search_codes, list_input_files, target_folder):

    """
    –ò—â–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∫–æ–¥—ã –≤ —Å–ø–∏—Å–∫–µ PDF-–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã—Ä–µ–∑–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –∫–æ–¥–∞–º–∏ –≤ –Ω–æ–≤—ã–π PDF-—Ñ–∞–π–ª.

    :param search_codes: –°–ø–∏—Å–æ–∫ –∫–æ–¥–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ (list).
    :param list_input_files: –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ –≤—Ö–æ–¥–Ω—ã–º PDF-—Ñ–∞–π–ª–∞–º (list).
    :param target_folder: –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (str).
    :return: None
    """
    name_file = []
    lines_not_found = search_codes.copy()
    file_pdf_writer = PdfWriter()

    for file_pdf in list_input_files:
        fp = open(file_pdf, 'rb')
        file_pdf_reader = PdfReader(file_pdf)

        parser = PDFParser(fp)
        document = PDFDocument(parser)
        count_pages = resolve1(document.catalog['Pages'])['Count']

        rsrcmgr = PDFResourceManager()
        laparams = LAParams()
        device = PDFPageAggregator(rsrcmgr, laparams=laparams)
        interpreter = PDFPageInterpreter(rsrcmgr, device)
        pages = PDFPage.get_pages(fp)

        index_page = 0
        index_count = 0

        print('–ü–æ–∏—Å–∫ –≤ —Ñ–∞–π–ª–µ: ' + file_pdf)
        for page in pages:
            index_page += 1
            print('–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü ' + str(index_page) + ' –∏–∑ ' + str(count_pages) + ' –≤ —Ñ–∞–π–ª–µ ' + file_pdf)
            interpreter.process_page(page)
            layout = device.get_result()
            for lobj in layout:
                if isinstance(lobj, LTTextBox):
                    x, y, fullstring = lobj.bbox[0], lobj.bbox[3], lobj.get_text().strip()

                    for substring in search_codes:
                        try:
                            fullstring.index(substring[24:])
                            print('\n–ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: ' + substring[24:])
                            info_code = print_data_code(substring)
                            name_file.append(info_code[1])
                            print(info_code[0])
                            lines_not_found.remove(substring)
                        except ValueError:
                            pass
                        else:
                            index_count += 1
                            # print('At %r is text: %s' % ((x, y), fullstring))
                            crop_page = extract_image(x, y, index_page, file_pdf_reader)
                            file_pdf_writer.add_page(crop_page)

    if len(lines_not_found) == 0:
        print('\n–í—Å–µ –∫–æ–¥—ã –Ω–∞–π–¥–µ–Ω—ã')
    else:
        print('\n–ù–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–¥—ã: ' + str(len(lines_not_found)))
        for code_not_found in lines_not_found:
            print(code_not_found)

    if len(file_pdf_writer.pages) > 0:
        with open(target_folder + os.sep + print_name_file(name_file, search_codes), "wb") as fp:
            file_pdf_writer.write(fp)


def print_data_code(substring):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–¥–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.

    :param substring: –ö–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (str).
    :return: –°–ø–∏—Å–æ–∫ —Å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–¥–µ –∏ –∏–º–µ–Ω–µ–º —Ñ–∞–π–ª–∞ (list).
    """
    i_out = ''
    code_checker = CodeChecker()
    data_code = code_checker.get_info(substring, "datamatrix")
    for i in data_code:
        i_out += i + ' '
    return [i_out + '\n', data_code[2]]


def print_name_file(name_file, lines):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è, –∑–∞–º–µ–Ω—è—è –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã.

    :param name_file: –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤ (list).
    :param lines: –°–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤ (list).
    :return: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ (str).
    """
    replace_values = {"/": "%", "[": "", "]": "", "\'": "", "\"": ""}
    name = str(list(set(name_file))) + ' (' + str(len(lines)) + ' pcs).pdf'
    return multiple_replace(name, replace_values)


def multiple_replace(target_str, replace_values):
    """
    –ó–∞–º–µ–Ω—è–µ—Ç –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ–¥—Å—Ç—Ä–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ –Ω–∞ –∑–∞–¥–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.

    :param target_str: –¶–µ–ª–µ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ (str).
    :param replace_values: –°–ª–æ–≤–∞—Ä—å –∑–∞–º–µ–Ω, –≥–¥–µ –∫–ª—é—á–∏ - —ç—Ç–æ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∑–∞–º–µ–Ω—ã, –∞ –∑–Ω–∞—á–µ–Ω–∏—è - —ç—Ç–æ –∑–∞–º–µ–Ω—è—é—â–∏–µ —Å—Ç—Ä–æ–∫–∏ (dict).
    :return: –ò–∑–º–µ–Ω–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É (str).
    """
    for i, j in replace_values.items():
        target_str = target_str.replace(i, j)
    return target_str


def fix_lines(list_pdf_files, out_folder, watermark_pdf_path):
    '''
    –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ñ–∏–∫—Å–∞ –ª–∏–Ω–∏–π –≤ PDF-—Ñ–∞–π–ª–∞—Ö.
    '''
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    for pdf_file in list_pdf_files:
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç PdfReader –¥–ª—è –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ –∏ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞
        watermark_reader = PdfReader(watermark_pdf_path)
        watermark_page = watermark_reader.pages[0]
        pdf_reader = PdfReader(pdf_file)
        pdf_writer = PdfWriter()

        i = 0
        total_pages = len(pdf_reader.pages)

        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—Ö–æ–¥–Ω–æ–≥–æ PDF –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫
        for page_num in range(total_pages):
            page = pdf_reader.pages[page_num]
            page.merge_page(watermark_page)
            pdf_writer.add_page(page)
            i = i + 1
            print(f'–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {i} –∏–∑ {total_pages} —Å—Ç—Ä–∞–Ω–∏—Ü –≤ —Ñ–∞–π–ª–µ {pdf_file}.')

        with open(os.path.join(out_folder, os.path.basename(pdf_file)), 'wb') as out_file:
            pdf_writer.write(out_file)


def check_file_exists(directory, file_name):
    files_in_directory = os.listdir(directory)
    return file_name in files_in_directory


def read_file(file_path):
    try:
        with open(file_path, 'r') as f:
            lines = f.readlines()
            if not lines:
                print(f"–§–∞–π–ª '{file_path}' –ø—É—Å—Ç–æ–π.")
                exit()
            return lines
    except FileNotFoundError:
        print(f"–§–∞–π–ª '{file_path}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        with open(file_path, 'w') as file:
            pass
        print(f"–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª '{file_path}'")
        exit()


def list_files(input_folder, file_type):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç–∏–ø–æ–º
    list_files = [f for f in glob.glob(os.path.join(input_folder, file_type))]

    # –ï—Å–ª–∏ —Ñ–∞–π–ª–æ–≤ –Ω–µ—Ç, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É
    if not list_files:
        print(f"–í –ø–∞–ø–∫–µ '{input_folder}' –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤ —Å —Ç–∏–ø–æ–º '{file_type}'.")
        exit()

    return list_files


def make_folders(folders):
    for name_folder in folders:
        if not os.path.exists(name_folder):
            os.makedirs(name_folder)
            print(f'–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ "{name_folder}"')
        else:
            print(f'–ü–∞–ø–∫–∞ "{name_folder}" —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')


if __name__ == "__main__":
    # make_folders(['search', 'input', 'out'])
    # print(read_file('datamatrix.txt'))
    # print(list_files('input', '*.pdf'))
    # fix_lines(list_files('input', '*.pdf'), 'out', 'watermark.pdf')  # input >>> out
    # check_datamatrix(read_file('datamatrix.txt'))  # datamatrix.txt >>> API
    find_txt_pdf(read_file('datamatrix.txt'), list_files('input', '*.pdf'), 'out')  # search  >>> datamatrix.txt >>> out
